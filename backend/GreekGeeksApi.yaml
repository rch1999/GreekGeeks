openapi: 3.0.3
info:
  title: GreekGeeks API
  version: '1.0'
  description: ''
  x-logo:
    url: ''
  license: null
  contact: null
paths:
  /token/:
    security: []
    post:
      operationId: get-token
      summary: "Get a access token/refresh token pair."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Credentials"
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWT"
              examples:
                JWT:
                  access: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjA3MzgxODE2LCJqdGkiOiJmMjAyZTZmYjYzMzU0NzQ1YmNjZDJhYWQwYWNkZTg0OCIsInVzZXJfaWQiOjF9.u_GyCyr5S6UQAl6DRf4WotcL6zg0yIz8UKCXy7wQveM"
                  refresh: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTYwNzQ2NzkxNiwianRpIjoiN2E3YWFhMzYwMzQyNGYxMzlhZjNlNDk1NmFhMjZlNzQiLCJ1c2VyX2lkIjoxfQ.QBpYG8MsOnkLKorYAD41PnnvwXmvXDPUj_UtkaWlmCo"
  /token/refresh/:
    post:
      operationId: refresh-token
      summary: "Get an access token from a refresh token."
      requestBody:
        content:
          application/json:
            schema:
              properties:
                refresh:
                  type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  access:
                    type: string
  '/organizations/{orgId}/contacts/':
    get:
      tags: []
      operationId: get-organization-contacts
      summary: "Get a list of all organization contacts."
      parameters:
      - name: orgId
        in: path
        schema:
          type: string
          format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: "#components/schemas/Contact"
    post:
      tags: []
      operationId: add-organization-contact
      summary: "Add a new contact to an organization."
      parameters:
      - name: orgId
        in: path
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            $ref: "#components/schemas/ContactAddition"
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAdditionResponse"
  '/organizations/{orgId}/contacts/{contactId}/':
    get:
      tags: []
      operationId: get-organization-contact
      summary: "Get an organization contact."
      parameters:
      - name: orgId
        in: path
        schema:
          type: string
          format: uuid
      - name: contactId
        in: path
        schema:
          type: string
          format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
    post:
      tags: []
      operationId: update-organization-contact
      summary: "Update an organization's contact."
      parameters:
      - name: orgId
        in: path
        schema:
          type: string
          format: uuid
      - name: contactId
        in: path
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactUpdate"
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceUpdateResponse"
    delete:
      tags: []
      operationId: delete-organization-contact
      summary: "Delete an organization contact."
      parameters:
      - name: orgId
        in: path
        schema:
          type: string
          format: uuid
      - name: contactId
        in: path
        schema:
          type: string
          format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/ResourceDeletionResponse"
  '/organizations/{orgId}/contacts/{contactId}/notes/':
    post:
      operationId: add-contact-note
      summary: "Add a note for a contact."
      parameters:
      - name: orgId
        in: path
        schema:
          type: string
          format: uuid
      - name: contactId
        in: path
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NoteAddition"
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAdditionResponse"

  '/organizations/{orgId}/contacts/{contactId}/notes/{noteId}/':
    delete:
      tags: []
      operationId: delete-contact-note
      summary: "Delete a contact note."
      parameters:
      - name: orgId
        in: path
        schema:
          type: string
          format: uuid
      - name: contactId
        in: path
        schema:
          type: string
          format: uuid
      - name: noteId
        in: path
        schema:
          type: string
          format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/ResourceDeletionResponse"
  '/organizations/{orgId}/members/':
    get:
      tags: []
      operationId: get-organization-members
      summary: "Get all of an organization's members."
      parameters:
      - name: orgId
        in: path
        schema:
          type: string
          format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Members"

  '/organizations/{orgId}/members/{memberId}/':
    get:
      tags: []
      operationId: get-organization-member
      summary: "Get information about an organization member."
      parameters:
      - name: orgId
        in: path
        schema:
          type: string
          format: uuid
      - name: memberId
        in: path
        schema:
          type: string
          format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Member"
    delete:
      tags: []
      operationId: delete-organization-member
      summary: "Delete an organization member from an organization."
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/ResourceDeletionResponse"

  '/organizations/{orgId}/ranks/':
    get:
      operationId: get-organization-ranks
      summary: "Get a list of ranks for an organization."
      parameters:
      - name: orgId
        in: path
        schema:
          type: string
          format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ranks"
    post:
      operationId: add-organization-rank
      summary: "Add a new organization rank."
      parameters:
      - name: orgId
        in: path
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            $ref: "#/components/schemas/RankAddition"
      responses:
        '201':
          content:
            application/json:
              $ref: "#/components/schemas/ResourceAdditionResponse"

  '/organizations/{orgId}/ranks/{rankId}/':
    post:
      operationId: update-organization-rank
      summary: "Update an existing organization rank."
      parameters:
      - name: orgId
        in: path
        schema:
          type: string
          format: uuid
      - name: rankId
        in: path
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            $ref: "#/components/schemas/RankUpdate"
      responses:
        '201':
          content:
            application/json:
              $ref: "#/components/schemas/ResourceUpdateResponse"

  '/organizations/{orgId}/requests/':
    get:
      tags: []
      operationId: get-organization-requests
      summary: "Get a list of membership requests for an organization."
      parameters:
      - name: orgId
        in: path
        schema:
          type: string
          format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MembershipRequests"
    post:
      tags: []
      operationId: add-organization-request
      summary: "Add a membership request for an organization."
      parameters:
      - name: orgId
        in: path
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            $ref: "#/components/schemas/MembershipRequestAddition"
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAdditionResponse"

  '/organizations/{orgId}/requests/{requestId}/':
    get:
      tags: []
      operationId: get-membership-request
      summary: "Get information about a membership request."
      parameters:
      - name: orgId
        in: path
        schema:
          type: string
          format: uuid
      - name: requestId
        in: path
        schema:
           type: string 
           format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MembershipRequest"
    post:
      tags: []
      operationId: accept-membership-request
      summary: "Accept a membership request."
      parameters:
      - name: orgId
        in: path
        schema:
          type: string
          format: uuid
      - name: requestId
        in: path
        schema:
           type: string 
           format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MembershipRequestAcceptance"
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceUpdateResponse"
    delete:
      tags: []
      operationId: reject-membership-request
      summary: "Reject a membership request."
      parameters:
      - name: orgId
        in: path
        schema:
          type: string
          format: uuid
      - name: requestId
        in: path
        schema:
           type: string 
           format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MembershipRequestAcceptance"
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/ResourceDeletionResponse"
  /users/:
    post:
      operationId: register-account
      summary: "Register for an account."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAddition"
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAdditionResponse"
  '/users/{userId}/':
    get:
      operationId: get-user
      summary: "Get information about a user."
      parameters:
      - name: userId
        in: path
        schema:
          type: string
          format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/User"
    post:
      operationId: modify-user
      summary: "Update user information."
      parameters:
      - name: userId
        in: path
        schema:
          type: string
          format: uuid
      requestBody:
        schema:
          $ref:  "#/components/schemas/UserUpdate"
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/ResourceUpdateResponse"
    delete:
      operationId: delete-user
      summary: "Delete an account."
      parameters:
      - name: userId
        in: path
        schema:
          type: string
          format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/ResourceDeletionResponse"
  '/users/{userId}/notifications/':
    get:
      operationId: get-user-notifications
      summary: "Get a list of notifications for a user."
      parameters:
      - name: userId
        in: path
        schema:
          type: string
          format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notifications"

  '/users/{userId}/notifications/{notificationId}/':
    get:
      tags: []
      operationId: get-user-notification
      summary: "Get information about a specific notification."
      parameters:
      - name: userId
        in: path
        schema:
          type: string
          format: uuid
      - name: notificationId
        in: path
        schema:
          type: string
          format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification"
    delete:
      tags: []
      operationId: delete-user-notification
      summary: "Delete a notification."
      parameters:
      - name: userId
        in: path
        schema:
          type: string
          format: uuid
      - name: notificationId
        in: path
        schema:
          type: string
          format: uuid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/ResourceDeletionResponse"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    ResourceAdditionResponse:
      required:
      - success
      properties:
        success:
          type: boolean
        uuid:
          type: string
          format: uuid
        errorMessage:
          type: string
    ResourceUpdateResponse:
      required:
      - success
      properties:
        success:
          type: boolean
        errorMessage:
          type: string
    ResourceDeletionResponse:
      required:
      - sucess
      properties:
        success:
          type: boolean
        errorMessage:
          type: string

    Credentials:
      required:
      - email
      - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    JWT:
      required:
      - email
      - password
      properties:
        access:
          type: string
        refresh:
          type: string

    Contact:
      required:
      - uuid
      - organization
      - first_name
      - last_name
      - primary_contact_method
      - rank
      properties:
        uuid:
          type: string
          format: uuid
        organization:
          $ref: "#components/schemas/Organization"
        first_name:
          type: string
        last_name:
          type: string
        primary_contact_method:
          $ref: "#components/schemas/ContactMethod"
        rank:
          $ref: "#components/schemas/ContactRank"
    Contacts:
      type: array
      items:
        $ref: "#components/schemas/Contact"

    ContactAddition:
      required:
      - first_name
      - organization_uuid
      properties:
        first_name:
          type: string
        last_name:
          type: string
        primary_contact_method:
          $ref:  "#/components/schemas/ContactMethodAddition"
        rank_uuid:
          type: string
          format: uuid
        organization_uuid:
          type: string
          format: uuid

    ContactUpdate:
      properties:
        first_name:
          type: string
        last_name:
          type: string
        primary_contact_method_uuid:
          type: string
          format: uuid
        rank_uuid:
          type: string
          format: uuid

    ContactMethod:
      required:
      - uuid
      - medium
      - value
      properties:
        uuid:
          type: string
          format: uuid
        medium:
          type: string
        value:
          type: string

    ContactMethodAddition:
      required:
      - medium
      - value
      properties:
        contact_uuid:
          type: string
          format: uuid
        medium:
          type: string
        value:
          type: string

    ContactRank:
      required:
      - uuid
      - organization
      - name
      - description
      properties:
        uuid:
          type: string 
          format: uuid
        organization: 
          $ref: "#/components/schemas/Organization"        
        name:
          type: string
        description:
          type: string
    
    Note:
      required:
      - uuid
      - contact
      - created_by
      - created
      - body
      - tags
      properties:
        uuid:
          type: string
          format: uuid
        contact:
          $ref: "#/components/schemas/Contact"
        created_by:
          $ref: "#/components/schemas/Member"
        created:
          type: string
          format: date-time
        body:
          type: string
        tags:
          $ref: "#/components/schemas/Tags"
    Notes:
      type: array
      items:
        $ref: "#/components/schemas/Note"
    NoteAddition:
      required:
      - body
      - tags
      properties:
        body:
          type: string
        tags:
          $ref: "#/components/schemas/Tags"

    Tag:
      type: string
    Tags:
      type: array
      items:
        $ref: "#/components/schemas/Tag"

    User:
      required:
      - uuid
      - first_name
      - last_name
      - email
      - is_admin
      - is_staff
      - created
      - updated
      properties:
        uuid:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        is_admin:
          type: boolean
        is_staff:
          type: boolean
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    UserAddition:
      required:
      - first_name
      - last_name
      - email
      - password
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
    UserUpdate:
      properties:
        first_name:
          type: string
        last_name:
          type: string
        password:
          type: string

    Notification:
      required:
      - uuid
      - user
      - created
      - body
      properties:
        uuid:
          type: string
          format: uuid
        user:
          $ref: "#/components/schemas/User"
        created:
          type: string
          format: date-time
        body:
          type: string
    Notifications:
      type: array
      items:
        $ref: "#/components/schemas/Notification"

    Member:
      properties:
        uuid:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
    Members:
      type: array
      items:
        $ref: "#/components/schemas/Member"
    MembershipRequest:
      required:
      - uuid
      - organization
      - user
      properties:
        uuid:
          type: string
          format: uuid
        organization:
          $ref: "#/components/schemas/Organization"
        user:
          $ref: "#/components/schemas/User"
    MembershipRequests:
      type: array
      items:
        $ref: "#/components/schemas/MembershipRequest"
    MembershipRequestAddition:
      required:
      - user_uuid
      properties:
        user_uuid:
          type: string
          format: uuid
    MembershipRequestAcceptance:
      properties: []


    Organization:
      required:
      - uuid
      - institution
      - chapter_name
      - members
      - admin_members
      properties:
        uuid:
          type: string
          format: uuid
        institution:
          type: string
        chapter_name:
          type: string
        members:
          $ref: "#/components/schemas/Members"
        admin_members:
          $ref: "#/components/schemas/Members"

    Rank:
      required:
      - uuid
      - organization
      - name
      - description
      properties:
        uuid:
          type: string
          format: uuid
        organization:
          $ref: "#/components/schemas/Organization"
        name:
          type: string
        description:
          type: string
    Ranks:
      type: array
      items:
        $ref: "#/components/schemas/Rank"
    RankUpdate:
      required:
        description:
          type: string
      properties:
        description:
          type: string
    RankAddition:
      required:
      - name
      - description
      properties:
        name:
          type: string
        description:
          type: string

    Task:
      required:
      - uuid
      - organization
      - assigner
      - assignees
      - title
      - body
      - due_date
      properties:
        uuid:
          type: string
          format: uuid
        organization:
          $ref: "#/components/schemas/Organization"
        assigner:
          $ref: "#/components/schemas/Member"
        assignees:
          $ref:  "#/components/schemas/Members"
        title:
          type: string
        body:
          type: string
        due_date:
          type: string
          format: date-time

    OrganizationImage:
      required:
      - uuid
      - organization
      - created
      - created_by
      - image
      properties:
        uuid:
          type: string
          format: uuid
        organization:
          $ref: "#/components/schemas/Organization"
        created:
          type: string
          format: date-time
        created_by:
          $ref: "#/components/schemas/Member"
        image:
          type: string
          format: uri
  responses: {}
  parameters: {}
tags: []
servers: []
security:
- JWTAuth: []
externalDocs: null
